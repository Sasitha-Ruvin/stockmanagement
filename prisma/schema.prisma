generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String?
  username String @unique
  password String
  type     String?
}

model Material {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String?
  quantity    Int
  supplier    String?
  unitPrice   Float
  isDeleted   Boolean         @default(false)
  purchases   PurchaseItem[]  // Corrected the relation to point to PurchaseItem
  issues      IssueItems[]
}

model MaterialIssue{
  id          Int             @id @default(autoincrement())
  issueDate   DateTime
  issueItems   IssueItems[]
  issueReason  String?
  issuedBy     String?
  issuedTo     String?
}

model IssueItems {
  id              Int             @id @default(autoincrement())
  quantity        Int
  material        Material        @relation(fields:[materialId], references:[id], onDelete:Cascade)
  materialId      Int
  materialissue   MaterialIssue   @relation(fields:[materialissueId], references:[id], onDelete:Cascade)
  materialissueId Int
}

model Purchase {
  id            Int             @id @default(autoincrement())
  purchaseDate  DateTime
  purchaseItems PurchaseItem[]
  total         Float?
  supplier      String?
  purchase      String?
}

model PurchaseItem {
  id          Int       @id @default(autoincrement())
  quantity    Int
  unitPrice   Float?
  unitTotal   Float?
  material    Material   @relation(fields: [materialId], references: [id], onDelete:Cascade)
  materialId  Int
  purchase    Purchase   @relation(fields: [purchaseId], references: [id], onDelete:Cascade)
  purchaseId  Int
}





model EquipmentStock {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  quantity    Int
  unitPrice   Float
  supplier    String?
  isDeleted   Boolean         @default(false)
  equipments  EquipmentItem[]
  issues      EquipmentIssueItems[]
 
}

model EquipPurchase {
  id                    Int       @id @default(autoincrement())
  purchaseDate          DateTime
  purchaseEquipment     EquipmentItem[]
  totalPrice            Float     @default(0) 
}

model EquipmentItem {
  id                   Int        @id @default(autoincrement())
  quantity             Int
  equipment            EquipmentStock   @relation(fields:[equipmentId], references:[id], onDelete:Cascade)
  equipmentId          Int
  equippurchase        EquipPurchase    @relation(fields:[purchaseId], references:[id], onDelete:Cascade)
  purchaseId           Int
}

model EquipmentIssue {
  id                        Int         @id @default(autoincrement())
  issueDate                 DateTime
  issueReason               String?
  returnDate                DateTime?
  issuedTo                  String
  issuedBy                  String
  status                    String      @default("On Issue")
  issueItems                EquipmentIssueItems[]
}

model EquipmentIssueItems {
  id                        Int             @id @default(autoincrement())
  quantity                  Int
  returnedQuantity          Int?
  equipment                 EquipmentStock  @relation(fields:[equipmentId], references:[id], onDelete:Cascade)
  equipmentId               Int
  equipmentissue            EquipmentIssue  @relation(fields:[issueId], references:[id], onDelete:Cascade)
  issueId                   Int
}





model RentalStocks {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  quantity      Int
  isDeleted     Boolean    @default(false)
  rentitems     RentItems[]
  rentpurchaase RentalPurchaseItem[]
}

model RentalPurchase {
  id                 Int        @id @default(autoincrement())
  purchaseDate       DateTime
  purchaseItems      RentalPurchaseItem []
  total              Float?
  supplier           String?
  reason             String?

}

model RentalPurchaseItem {
  id                  Int    @id @default(autoincrement())
  quantity            Int
  unitPrice           Float?
  unitTotal           Float? 
  rentalstock         RentalStocks @relation(fields:[rentalstockid], references:[id], onDelete:Cascade)
  rentalstockid       Int
  rentalpurchase      RentalPurchase @relation(fields:[rentalpurchaseid], references:[id], onDelete:Cascade)
  rentalpurchaseid    Int   
}


model RentOrder{
  id                Int             @id @default(autoincrement())
  issueDate         DateTime
  returnDate        DateTime?
  client            String
  clinetContact     String
  status            String          @default("On Rent")
  rentitems         RentItems[]

}


model RentItems{
  id                 Int             @id @default(autoincrement())
  quantity           Int
  rentalstock        RentalStocks    @relation(fields:[rentalstockid], references:[id], onDelete:Cascade)
  rentalstockid      Int
  rentalorder        RentOrder       @relation(fields:[rentalorderid], references:[id], onDelete:Cascade)
  rentalorderid      Int
  returnedQuantity   Int?
}




model Supplier {
  id          Int    @id @default(autoincrement())
  name        String
  contact     String
  address     String
  email       String
}



